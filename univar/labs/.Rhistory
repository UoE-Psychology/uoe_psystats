library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
plot(my.data[, c('age', 'musicality', 'spotify_hours')])
my.data$spotify_hours <- my.data$spotify_hours + rnorm(100, 0, 25)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
plot(my.data[, c('age', 'musicality', 'spotify_hours')])
my.data$spotify_hours <- my.data$spotify_hours + rnorm(100, 0, 25)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
plot(my.data[, c('age', 'musicality', 'spotify_hours')])
my.data$spotify_hours <- my.data$spotify_hours + rnorm(100, 0, 25)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
plot(my.data[, c('age', 'musicality', 'spotify_hours')])
my.data$spotify_hours <- my.data$spotify_hours + rnorm(100, 0, 25)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
plot(my.data[, c('age', 'musicality', 'spotify_hours')])
my.data$spotify_hours <- my.data$spotify_hours + rnorm(100, 0, 25)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
plot(my.data[, c('age', 'musicality', 'spotify_hours')])
my.data$spotify_hours <- my.data$spotify_hours + rnorm(100, 0, 10)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
plot(my.data[, c('age', 'musicality', 'spotify_hours')])
my.data$spotify_hours <- my.data$spotify_hours + rnorm(100, 0, 10)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
# A few different examples of illustrating this:
my.data$cutAge <- cut(my.data$age, 4)
#a ggplot
library(ggplot2)
ggplot(data = my.data, aes(x = musicality, y = spotify_hours)) +
geom_point()+
theme_minimal()+
facet_grid(~cutAge)+
geom_smooth(method="lm", se=T)
#alternatively, plot each fitted line using abline()
#Note: repeat command, changing the subset variable and col on each
with(my.data, plot(musicality, spotify_hours, col = cutAge))
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[1])), col = "red")
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[2])), col = "blue")
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[3])), col = "green")
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[4])), col = "black")
ggplot(data = my.data, aes(x = musicality, y = spotify_hours, col=cutAge)) +
#geom_point()+
theme_minimal()+
geom_smooth(method="lm", se=TRUE)
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
plot(my.data[, c('age', 'musicality', 'spotify_hours')])
my.data$spotify_hours <- my.data$spotify_hours + rnorm(100, 0, 10)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
hist(resid(model))
par(mfrow = c(2, 2)) # to plot all of the below in one window
plot(model)
par(mfrow = c(1, 1)) # revert back to one plot per window
# A few different examples of illustrating this:
my.data$cutAge <- cut(my.data$age, 4)
#a ggplot
library(ggplot2)
ggplot(data = my.data, aes(x = musicality, y = spotify_hours, col=cutAge)) +
geom_point()+
geom_smooth(method="lm", se=T)+
theme_minimal()
# A few different examples of illustrating this:
my.data$cutAge <- cut(my.data$age, 4)
#a ggplot
library(ggplot2)
ggplot(data = my.data, aes(x = musicality, y = spotify_hours, col=cutAge)) +
geom_point()+
geom_smooth(method="lm", se=T)+
theme_minimal()+
facet_grid(~cutAge)
ggplot(data = my.data, aes(x = musicality, y = spotify_hours)) +
geom_point()+
facet_grid(~cutAge)+
theme_minimal()
bigger_model <- glm(survived ~ age + sex + pclass + sib_sp + parch, data = titanic, family=binomial)
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
plot(my.data[, c('age', 'musicality', 'spotify_hours')])
my.data$spotify_hours <- my.data$spotify_hours + rnorm(100, 0, 10)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
hist(resid(model))
par(mfrow = c(2, 2)) # to plot all of the below in one window
plot(model)
par(mfrow = c(1, 1)) # revert back to one plot per window
# A few different examples of illustrating this:
my.data$cutAge <- cut(my.data$age, 4)
#a ggplot
library(ggplot2)
ggplot(data = my.data, aes(x = musicality, y = spotify_hours, col=cutAge)) +
geom_smooth(method="lm", se=T)+
theme_minimal()
ggplot(data = my.data, aes(x = musicality, y = spotify_hours)) +
geom_point()+
facet_grid(~cutAge)+
theme_minimal()
#alternatively, plot each fitted line using abline()
#Note: repeat command, changing the subset variable and col on each
with(my.data, plot(musicality, spotify_hours, col = cutAge))
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[1])), col = "red")
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[2])), col = "blue")
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[3])), col = "green")
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[4])), col = "black")
load(url("https://is.gd/rYCGR3"))
m<-matrix(c(names(titanic), "ID of passenger", "Categorical indicating whether (1) or not (0) the passenger survived",
"Class of ticket (1,2,3)","Name of passenger","Sex of passenger ('male'/'female')","Age in year","Number of spouses and siblings on board","Number of parents or children on board","Ticket code","Ticket fare","Cabin number","Port of embarkation (C = Cherbourg, Q = Queenstown, S = Southampton)"), nrow=length(names(titanic)))
colnames(m)<-c("Variable","Description")
knitr::kable(m)
with(titanic, plot(survived ~ pclass))
abline(lm(survived~pclass, data=titanic))
(0.6/(1-0.6)) # odds
log(0.6/(1-0.6)) # log odds
logit_mod <- glm(survived ~ pclass, data = titanic, family=binomial)
coef(logit_mod)
titanic$fit = 1.6205282 - 0.9119899*titanic$pclass
#or
titanic$fit = coef(logit_mod)[1] + coef(logit_mod)[2]*titanic$pclass
predicted_probs <- exp(titanic$fit) / (1 + exp(titanic$fit))
titanic$p_surv <- predict(logit_mod, type="response")
#and check that they are the same using the all.equal() function
all.equal(predicted_probs, titanic$p_surv)
titanic$p_surv <- ifelse(titanic$p_surv > 0.5, 1, 0)
table(
actual = titanic$survived,
predicted = titanic$p_surv
)
bigger_model <- glm(survived ~ age + sex + pclass + sib_sp + parch, data = titanic, family=binomial)
summary(bigger_model)
BIC(bigger_model)
bigger_model1 <- glm(survived ~ age + sex + pclass + sib_sp, data = titanic, family=binomial)
BIC(bigger_model1)
bigger_model1 <- glm(survived ~ age + sex + pclass , data = titanic, family=binomial)
BIC(bigger_model1)
bigger_model1 <- glm(survived ~ age + sex, data = titanic, family=binomial)
BIC(bigger_model1)
bigger_model <- glm(survived ~ age + sex + pclass + sib_sp, data = titanic, family=binomial)
bigger_model <- glm(survived ~ age + sex + pclass, data = titanic, family=binomial)
anova(bigger_model, bigger_model1)
AIC(bigger_model, bigger_model1)
bigger_model1 <- glm(survived ~ age + sex + pclass + sib_sp, data = titanic, family=binomial)
AIC(bigger_model, bigger_model1)
BIC(bigger_model, bigger_model1)
summary(bigger_model1)
summary(bigger_model)
bigger_model1 <- glm(survived ~ age + sex + pclass + sib_sp, data = titanic, family=binomial)
summary(bigger_model)
bigger_model1 <- glm(survived ~ age + sex + pclass + sib_sp, data = titanic, family=binomial)
titanic_model <- glm(survived ~ age + sex + pclass + sib_sp, data = titanic, family=binomial)
titanic_model0 <- glm(survived ~ age + sex + pclass, data = titanic, family=binomial)
titanic_model <- glm(survived ~ age + sex + pclass + sib_sp, data = titanic, family=binomial)
titanic_model1 <- glm(survived ~ age + sex + pclass + sib_sp + parch, data = titanic, family=binomial)
BIC(titanic_model0, titanic_model, titanic_model1)
summary(titanic_model)
summary(titanic_model1)
summary(titanic_model0)
AIC(titanic_model0, titanic_model, titanic_model1)
titanic_model <- glm(survived ~ age + sex + pclass + sib_sp, data = titanic, family=binomial)
titanic_model <- glm(survived ~ age + sex + pclass + sib_sp + parch, data = titanic, family=binomial)
exp(coef(titanic_model))
# remember to exp()!
exp(confint(bigger_model))
# remember to exp()!
exp(confint(titanic_model))
exp(coef(titanic_model))
cbind(est=exp(coef(titanic_model)),exp(confint(titanic_model))
)
cbind(est=exp(coef(titanic_model)),exp(confint(titanic_model))
effects<-cbind(est=exp(coef(titanic_model)), exp(confint(titanic_model)))
effects
names(effects)
data.frame(est=exp(coef(titanic_model)))
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
plot(my.data[, c('age', 'musicality', 'spotify_hours')])
my.data$spotify_hours <- my.data$spotify_hours + rnorm(100, 0, 10)
model <- lm(spotify_hours ~ age * musicality, data = my.data)
summary(model)
hist(resid(model))
par(mfrow = c(2, 2)) # to plot all of the below in one window
plot(model)
par(mfrow = c(1, 1)) # revert back to one plot per window
# A few different examples of illustrating this:
my.data$cutAge <- cut(my.data$age, 4)
#a ggplot
library(ggplot2)
ggplot(data = my.data, aes(x = musicality, y = spotify_hours, col=cutAge)) +
geom_smooth(method="lm", se=T)+
theme_minimal()
ggplot(data = my.data, aes(x = musicality, y = spotify_hours)) +
geom_point()+
facet_grid(~cutAge)+
theme_minimal()
#alternatively, plot each fitted line using abline()
#Note: repeat command, changing the subset variable and col on each
with(my.data, plot(musicality, spotify_hours, col = cutAge))
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[1])), col = "red")
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[2])), col = "blue")
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[3])), col = "green")
abline(lm(spotify_hours ~ musicality,
data = subset(my.data, cutAge == levels(cutAge)[4])), col = "black")
load(url("https://is.gd/rYCGR3"))
m<-matrix(c(names(titanic), "ID of passenger", "Categorical indicating whether (1) or not (0) the passenger survived",
"Class of ticket (1,2,3)","Name of passenger","Sex of passenger ('male'/'female')","Age in year","Number of spouses and siblings on board","Number of parents or children on board","Ticket code","Ticket fare","Cabin number","Port of embarkation (C = Cherbourg, Q = Queenstown, S = Southampton)"), nrow=length(names(titanic)))
colnames(m)<-c("Variable","Description")
knitr::kable(m)
with(titanic, plot(survived ~ pclass))
abline(lm(survived~pclass, data=titanic))
(0.6/(1-0.6)) # odds
log(0.6/(1-0.6)) # log odds
logit_mod <- glm(survived ~ pclass, data = titanic, family=binomial)
coef(logit_mod)
titanic$fit = 1.6205282 - 0.9119899*titanic$pclass
#or
titanic$fit = coef(logit_mod)[1] + coef(logit_mod)[2]*titanic$pclass
predicted_probs <- exp(titanic$fit) / (1 + exp(titanic$fit))
titanic$p_surv <- predict(logit_mod, type="response")
#and check that they are the same using the all.equal() function
all.equal(predicted_probs, titanic$p_surv)
titanic$p_surv <- ifelse(titanic$p_surv > 0.5, 1, 0)
table(
actual = titanic$survived,
predicted = titanic$p_surv
)
titanic_model <- glm(survived ~ age + sex + pclass + sib_sp + parch, data = titanic, family=binomial)
exp(coef(titanic_model))
# 0.07 odds of survival for males relative females
# remember to exp()!
exp(confint(titanic_model))
est <- exp(coef(titanic_model))
lower <- exp(confit(titanic_model))[,1]
# remember to exp()!
exp(confint(titanic_model))
est <- exp(coef(titanic_model))
lower <- exp(confint(titanic_model))[,1]
upper <- exp(confint(titanic_model))[,2]
param <- names(coef(titanic_model))
effects <- data.frame(param, est, lower, upper)
ggplot(data = effects, aes(x = param, y = est, ymin = lower, ymax = upper)) +
geom_point() +
geom_errorbar()
ggplot(data = effects[-1,], aes(x = param, y = est, ymin = lower, ymax = upper)) +
geom_point() +
geom_errorbar()
ggplot(data = effects[-1,], aes(x = param, y = est, ymin = lower, ymax = upper)) +
geom_point() +
geom_errorbar() +
coord_flip()
make.sheet("Univar_Lab_9.Rmd",solution=F,course="usmr")
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
.1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
library(plotly)
# if you don't include the '~'s, the axes will be labelled 'X', 'y', and 'z'.
with(my.data, plot_ly(x = ~age, y = ~musicality, z = ~spotify_hours))
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 5 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
library(plotly)
# if you don't include the '~'s, the axes will be labelled 'X', 'y', and 'z'.
with(my.data, plot_ly(x = ~age, y = ~musicality, z = ~spotify_hours))
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 3 * my.data$age +
2 * my.data$musicality +
1 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
library(plotly)
# if you don't include the '~'s, the axes will be labelled 'X', 'y', and 'z'.
with(my.data, plot_ly(x = ~age, y = ~musicality, z = ~spotify_hours))
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 1 * my.data$age +
2 * my.data$musicality +
.5 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
library(plotly)
# if you don't include the '~'s, the axes will be labelled 'X', 'y', and 'z'.
with(my.data, plot_ly(x = ~age, y = ~musicality, z = ~spotify_hours))
library(plotly)
my.data <- data.frame(ppt = factor(1:100))
my.data$age <- runif(100, 20, 60)
## Here are some simple versions based on the hints above:
my.data$musicality <- sample(c(1:7), 100, replace = TRUE)
## here's the summary based on the commands above:
summary(my.data)
my.data$spotify_hours <- 300 - 1 * my.data$age +
2 * my.data$musicality +
.2 * my.data$age * my.data$musicality
#this would mean that someone who is 20, and who is very musical (scores 7),
#listens to spotify for 300-(5*20)+(2*7)+(1*20*7) = 354 hours
#(that's about an hour a day).
library(plotly)
# if you don't include the '~'s, the axes will be labelled 'X', 'y', and 'z'.
with(my.data, plot_ly(x = ~age, y = ~musicality, z = ~spotify_hours))
300-(1*20)+(2*7)+(.2*20*7)
make.sheet("Univar_Lab_9.Rmd",solution=F,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
p=0.6
(p/(1-p)) # odds
log(p/(1-p)) # log odds
p=0.5
(p/(1-p)) # odds
log(p/(1-p)) # log odds
p=0.7
(p/(1-p)) # odds
log(p/(1-p)) # log odds
p=0.9
(p/(1-p)) # odds
log(p/(1-p)) # log odds
make.sheet("Univar_Lab_9.Rmd",solution=F,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=F,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=F,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=F,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=F,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=F,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=F,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=F,course="usmr")
make.sheet("Univar_Lab_9.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_8.Rmd",solution=T,course="usmr")
make.sheet("Univar_Lab_8.Rmd",solution=T,course="usmr")
